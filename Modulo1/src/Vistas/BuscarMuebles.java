/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import DAO.DAO_Venta;
import Model.Ventas;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jose_Gonzalez
 */
public class BuscarMuebles extends javax.swing.JInternalFrame {

    /**
     * Creates new form BuscarMuebles
     */
    public BuscarMuebles() {
        initComponents();

        mostrarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Menu = new javax.swing.JPopupMenu();
        Seleccionar = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        cbCategorias = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        Seleccionar.setText("Seleccionar");
        Seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarActionPerformed(evt);
            }
        });
        Menu.add(Seleccionar);

        setClosable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Buscar Proiductos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel2.setText("Buscar:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });
        getContentPane().add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 180, -1));

        cbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una categoría:", "Linea Blanca", "Muebles", "Electronicos", "Decoracion" }));
        cbCategorias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCategoriasItemStateChanged(evt);
            }
        });
        getContentPane().add(cbCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, 260, 20));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PRODUCTO", "DESCRIPCION", "STOCK", "COSTO"
            }
        ));
        table.setComponentPopupMenu(Menu);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 710, 190));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarActionPerformed
        enviarArticulo();
        dispose();
    }//GEN-LAST:event_SeleccionarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        getProductoBuscador();
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void cbCategoriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCategoriasItemStateChanged
        llenarTabla();
    }//GEN-LAST:event_cbCategoriasItemStateChanged

    Ventas ventas = new Ventas();
    DAO_Venta $ventas = new DAO_Venta();

    public void enviarArticulo() {
        if (table.getRowCount() > 0) {
            try {
                String cant = null;
                DefaultTableModel modelo = (DefaultTableModel) Venta.tablaVentas.getModel();
                String[] dato = new String[5];
                int fila = table.getSelectedRow();

                if (fila == -1) {
                    JOptionPane.showMessageDialog(null, "Seleccione un artículo", "PRODUCTOS", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    String id = table.getValueAt(fila, 0).toString();
                    String iden = table.getValueAt(fila, 1).toString();
                    String desc = table.getValueAt(fila, 2).toString();
                    String precio = table.getValueAt(fila, 4).toString();
                    int c = 0;
                    int j = 0;
                    cant = JOptionPane.showInputDialog(null, "Ingresa la cantidad:", "PRODUCTOS", JOptionPane.INFORMATION_MESSAGE);
                    while (!isNumber(cant) && cant != null) {
                        cant = JOptionPane.showInputDialog(null, "Debe ingresar valores numéricos\ny que sean mayor a 0:",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    if ((cant.equals("")) || (cant.equals("0"))) {
                        //JOptionPane.showInputDialog(null, "Debe introduir un valor númerico y mayor a 0", "ERROR", JOptionPane.ERROR_MESSAGE);
                    } else {
                        int canting = Integer.parseInt(cant);
                        int comp = Integer.parseInt($ventas.comparar(id));
                        if (canting > comp) {
                            JOptionPane.showMessageDialog(null, "No se cuenta con esa cantidad de productos!!!");
                        } else {
                            for (int i = 0; i < Venta.tablaVentas.getRowCount(); i++) {
                                Object com = Venta.tablaVentas.getValueAt(i, 0);
                                Object cant1 = Venta.tablaVentas.getValueAt(i, 3);
                                if (id.equals(com)) {
                                    j = i;
                                    int cantT = Integer.parseInt(cant) + Integer.parseInt((String) cant1);
                                    c++;
                                    calcular();
                                    if (cantT > comp) {
                                        JOptionPane.showMessageDialog(null, "No se cuenta con esa cantidad de productos!!!");
                                    } else {
                                        Venta.tablaVentas.setValueAt(String.valueOf(cantT), i, 3);
                                    }
                                }
                            }
                            if (c == 0) {
                                dato[0] = id;
                                dato[1] = iden;
                                dato[2] = desc;
                                dato[3] = cant;
                                dato[4] = precio;
                                //dato[4] = cant;

                                modelo.addRow(dato);

                                Venta.tablaVentas.setModel(modelo);
                                calcular();

                                if (Venta.tablaVentas.getRowCount() != 0 && Venta.tablaVentas.getSelectedRow() != -1) {

                                } else {
                                    Venta.btnVaciarCarrito.setEnabled(true);
                                    Venta.txtCantidadRecibida.setEnabled(true);
                                    Venta.btnCalcularCambio.setEnabled(true);
                                    Venta.cbFormaPago.setEnabled(true);
                                    Venta.cbFlete.setEnabled(true);
                                    //Venta.btnRealizarVenta.setEnabled(true);
                                }
                            }
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay registros", "PRODUCTOS", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static boolean isNumber(String n) {
        try {
            if (Integer.parseInt(n) > 0) {
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public static void calcular() {
        String pre;
        String can;
        double total = 0;
        double precio;
        int cantidad;
        double imp = 0.0;
        Venta.tablaVentas.setDefaultRenderer(Object.class, new Render());
        JButton btn1 = new JButton();
        btn1.setName("ELIMINAR");
        String ruta = System.getProperty("user.dir");
        ruta += "\\src\\Vistas\\Minus.png";
        ImageIcon icon = new ImageIcon(ruta);
        //btn1.setBorder(noFocusBorder);
        //btn1.setBorderPainted(false);
        btn1.setBackground(Color.white);
        btn1.setIcon(icon);
        for (int i = 0; i < Venta.tablaVentas.getRowCount(); i++) {
            pre = Venta.tablaVentas.getValueAt(i, 4).toString();
            can = Venta.tablaVentas.getValueAt(i, 3).toString();
            precio = Double.parseDouble(pre);
            cantidad = Integer.parseInt(can);
            imp = precio * cantidad;
            total = total + imp;
            Venta.tablaVentas.setValueAt(Math.rint(imp * 100) / 100, i, 5);
            Venta.tablaVentas.setValueAt(btn1, i, 6);

        }
        Venta.jlTotal.setText("" + Math.rint(total * 100) / 100);
        double totall = Double.parseDouble(Venta.jlTotal.getText());
        double iva = (16 * totall) / 100;
        Venta.jlIva.setText("" + iva);
        double totalIva = totall + iva;
        Venta.jlTotalIva.setText("" + totalIva);
        
        int suma = 0;
        for (int i = 0; i < Venta.tablaVentas.getRowCount(); i++) {
            Object cant1 = Venta.tablaVentas.getValueAt(i, 3);
            
            int cantiTotal = Integer.parseInt((String) cant1);
            suma += cantiTotal;
        }
        Venta.jlCantidadTotal.setText(""+suma);
    }

    private void llenarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) table.getModel();
        String categoria = (String) cbCategorias.getSelectedItem();

        try {
            ArrayList<Ventas> lista = new ArrayList<Ventas>($ventas.buscarMueblesCategoria(categoria));
            int num = lista.size();
            modelo.setNumRows(num);
            for (int i = 0; i < lista.size(); i++) {
                modelo.setValueAt(lista.get(i).getIdProducto(), i, 0);
                modelo.setValueAt(lista.get(i).getProducto(), i, 1);
                modelo.setValueAt(lista.get(i).getDescripcion(), i, 2);
                modelo.setValueAt(lista.get(i).getCantidad(), i, 3);
                modelo.setValueAt(lista.get(i).getCosto(), i, 4);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR 404 NOT FOUND\n" + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void mostrarDatos() {
        DefaultTableModel modelo = (DefaultTableModel) table.getModel();

        try {
            ArrayList<Ventas> lista = new ArrayList<Ventas>($ventas.getAllProduct());
            int num = lista.size();
            modelo.setNumRows(num);
            for (int i = 0; i < lista.size(); i++) {
                modelo.setValueAt(lista.get(i).getIdProducto(), i, 0);
                modelo.setValueAt(lista.get(i).getProducto(), i, 1);
                modelo.setValueAt(lista.get(i).getDescripcion(), i, 2);
                modelo.setValueAt(lista.get(i).getCantidad(), i, 3);
                modelo.setValueAt(lista.get(i).getCosto(), i, 4);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR 404 NOT FOUND\n" + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void getProductoBuscador() {
        limpiarTabla();
        DefaultTableModel tableCliente = (DefaultTableModel) table.getModel();
        String nombre = txtBuscar.getText();
        ArrayList<Ventas> productos = $ventas.buscarMuebles(nombre);

        productos.forEach((producto) -> {
            System.out.println(producto.getNombre());
            int fila = tableCliente.getRowCount();
            tableCliente.addRow(new Object[1]);
            tableCliente.setValueAt(producto.getIdProducto(), fila, 0);
            tableCliente.setValueAt(producto.getProducto(), fila, 1);
            tableCliente.setValueAt(producto.getDescripcion(), fila, 2);
            tableCliente.setValueAt(producto.getCantidad(), fila, 3);
            tableCliente.setValueAt(producto.getCosto(), fila, 4);
        });
    }

    public void limpiarTabla() {
        DefaultTableModel tableclientes = (DefaultTableModel) table.getModel();
        for (int filas = tableclientes.getRowCount() - 1; filas >= 0; filas--) {
            tableclientes.removeRow(filas);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu Menu;
    public javax.swing.JMenuItem Seleccionar;
    private javax.swing.JComboBox<String> cbCategorias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
